package prs_test

import (
	"bytes"
	"os"
	"testing"

	"github.com/dcrodman/archon/internal/prs"
)

func TestPRS(t *testing.T) {
	// decompressed_stats_file.prs was generated by the PRS implementation in C.
	decompressedFile := "./testdata/decompressed_stats_file.prs"
	wantDecompressed, err := os.ReadFile(decompressedFile)
	if err != nil {
		t.Fatalf("err %v", err)
	}

	testFile := "../../setup/parameters/PlyLevelTbl.prs"
	golden, err := os.ReadFile(testFile)
	if err != nil {
		t.Fatalf("err %v", err)
	}

	size, err := prs.DecompressSize(golden)
	if err != nil {
		t.Fatalf("decompress size err: %v", err)
	}

	gotDecompressed, err := prs.Decompress(golden, size)
	if err != nil {
		t.Fatalf("decompress err: %v", err)
	}

	if !bytes.Equal(gotDecompressed, wantDecompressed) {
		t.Fatalf("decompressed file does not match expected output")
	}
}

var result []byte

func BenchmarkDecompress(b *testing.B) {
	testFile := "../../setup/parameters/PlyLevelTbl.prs"
	golden, err := os.ReadFile(testFile)
	if err != nil {
		b.Fatalf("err %v", err)
	}

	b.ResetTimer()
	b.Run("decompress_with_size", func(b *testing.B) {
		size, err := prs.DecompressSize(golden)
		if err != nil {
			b.Fatalf("decompress size err: %v", err)
		}

		gotDecompressed, err := prs.Decompress(golden, size)
		if err != nil {
			b.Fatalf("decompress err: %v", err)
		}
		result = gotDecompressed
	})
	b.Run("decompress_without_size", func(b *testing.B) {
		size, err := prs.DecompressSize(golden)
		if err != nil {
			b.Fatalf("decompress size err: %v", err)
		}

		gotDecompressed, err := prs.Decompress(golden, size)
		if err != nil {
			b.Fatalf("decompress err: %v", err)
		}
		result = gotDecompressed
	})
}
